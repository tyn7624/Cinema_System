// <auto-generated />
using System;
using Cinema.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cinema.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cinema.Models.Coupon", b =>
                {
                    b.Property<int>("CouponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CouponImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("UsageLimit")
                        .HasColumnType("float");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.HasKey("CouponID");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            CouponID = 1,
                            Code = "TEST10",
                            CouponImage = "",
                            DiscountPercentage = 0.10000000000000001,
                            UsageLimit = 10.0,
                            UsedCount = 1
                        });
                });

            modelBuilder.Entity("Cinema.Models.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieID"));

                    b.Property<string>("AgeLimit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUpcomingMovie")
                        .HasColumnType("bit");

                    b.Property<string>("MovieImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieID");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieID = 1,
                            AgeLimit = "13+",
                            Duration = 148,
                            Genre = "Sci-Fi",
                            IsUpcomingMovie = false,
                            MovieImage = "https://m.media-amazon.com/images/I/51oBxmV-dML._AC_.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "A thief who enters the dreams of others to steal secrets.",
                            Title = "Inception",
                            TrailerLink = "https://www.youtube.com/watch?v=YoHD9XEInc0"
                        },
                        new
                        {
                            MovieID = 2,
                            AgeLimit = "16+",
                            Duration = 152,
                            Genre = "Action",
                            IsUpcomingMovie = false,
                            MovieImage = "https://m.media-amazon.com/images/I/A1exRxgHRRL.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "Batman faces the Joker, a criminal mastermind who brings chaos to Gotham.",
                            Title = "The Dark Knight",
                            TrailerLink = "https://www.youtube.com/watch?v=EXeTwQWrcwY"
                        },
                        new
                        {
                            MovieID = 3,
                            AgeLimit = "10+",
                            Duration = 169,
                            Genre = "Sci-Fi",
                            IsUpcomingMovie = false,
                            MovieImage = "https://m.media-amazon.com/images/I/91kFYg4fX3L._AC_SL1500_.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "A team of explorers travel through a wormhole in space in an attempt to save humanity.",
                            Title = "Interstellar",
                            TrailerLink = "https://www.youtube.com/watch?v=zSWdZVtXT7E"
                        },
                        new
                        {
                            MovieID = 4,
                            AgeLimit = "12+",
                            Duration = 192,
                            Genre = "Adventure",
                            IsUpcomingMovie = false,
                            MovieImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTfTiEWQYqVZHQuVHy6G9PQIUfa5ujUpy0e7fZ-t6TwN19glQiAuhNS3PkWt-v48Lr9pIE&usqp=CAU",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "Jake Sully and Neytiri must protect their family from an old enemy on Pandora.",
                            Title = "Avatar: The Way of Water",
                            TrailerLink = "https://www.youtube.com/watch?v=d9MyW72ELq0"
                        },
                        new
                        {
                            MovieID = 5,
                            AgeLimit = "13+",
                            Duration = 155,
                            Genre = "Sci-Fi",
                            IsUpcomingMovie = false,
                            MovieImage = "https://m.media-amazon.com/images/I/81MUHYLUf6L._AC_UF894,1000_QL80_.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "A noble family's son leads a rebellion on a desert planet.",
                            Title = "Dune",
                            TrailerLink = "https://www.youtube.com/watch?v=n9xhJrPXop4"
                        },
                        new
                        {
                            MovieID = 6,
                            AgeLimit = "18+",
                            Duration = 169,
                            Genre = "Action",
                            IsUpcomingMovie = false,
                            MovieImage = "https://m.media-amazon.com/images/I/71tIm0Xxr2L._AC_UF894,1000_QL80_.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "John Wick takes on the High Table in his most dangerous fight.",
                            Title = "John Wick 4",
                            TrailerLink = "https://www.youtube.com/watch?v=qEVUtrk8_B4"
                        },
                        new
                        {
                            MovieID = 7,
                            AgeLimit = "16+",
                            Duration = 180,
                            Genre = "Biography",
                            IsUpcomingMovie = false,
                            MovieImage = "https://m.media-amazon.com/images/I/71qu4p5bnDL._AC_UF894,1000_QL80_.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "The story of J. Robert Oppenheimer and the atomic bomb.",
                            Title = "Oppenheimer",
                            TrailerLink = "https://www.youtube.com/watch?v=bK6ldnjE3Y0"
                        },
                        new
                        {
                            MovieID = 8,
                            AgeLimit = "13+",
                            Duration = 148,
                            Genre = "Superhero",
                            IsUpcomingMovie = false,
                            MovieImage = "https://m.media-amazon.com/images/I/71niXI3lxlL._AC_SL1500_.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "Spider-Man fights villains from multiple universes.",
                            Title = "Spider-Man: No Way Home",
                            TrailerLink = "https://www.youtube.com/watch?v=JfVOs4VSpmA"
                        },
                        new
                        {
                            MovieID = 9,
                            AgeLimit = "16+",
                            Duration = 148,
                            Genre = "Sci-Fi",
                            IsUpcomingMovie = false,
                            MovieImage = "https://m.media-amazon.com/images/I/71PQje4I99L.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "Neo returns to the Matrix for a new journey.",
                            Title = "The Matrix Resurrections",
                            TrailerLink = "https://www.youtube.com/watch?v=9ix7TUGVYIo"
                        },
                        new
                        {
                            MovieID = 10,
                            AgeLimit = "18+",
                            Duration = 120,
                            Genre = "Action/Comedy",
                            IsUpcomingMovie = true,
                            MovieImage = "https://m.media-amazon.com/images/I/71wNKMs+CvL._AC_UF894,1000_QL80_.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "Deadpool returns with more fourth-wall-breaking humor.",
                            Title = "Deadpool 3",
                            TrailerLink = ""
                        },
                        new
                        {
                            MovieID = 11,
                            AgeLimit = "16+",
                            Duration = 150,
                            Genre = "Action",
                            IsUpcomingMovie = true,
                            MovieImage = "https://m.media-amazon.com/images/I/61NCZ4VQ8EL._AC_UF894,1000_QL80_.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "The Dark Knight faces a new enemy in Gotham.",
                            Title = "The Batman 2",
                            TrailerLink = ""
                        },
                        new
                        {
                            MovieID = 12,
                            AgeLimit = "12+",
                            Duration = 180,
                            Genre = "Adventure",
                            IsUpcomingMovie = true,
                            MovieImage = "https://m.media-amazon.com/images/I/61SNSxk3RNL._AC_UF894,1000_QL80_.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "The Na'vi continue their fight against human invaders.",
                            Title = "Avatar 3",
                            TrailerLink = ""
                        },
                        new
                        {
                            MovieID = 13,
                            AgeLimit = "13+",
                            Duration = 140,
                            Genre = "Superhero",
                            IsUpcomingMovie = true,
                            MovieImage = "https://m.media-amazon.com/images/I/81TBhA6kgBL.jpg",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "Marvel's First Family joins the MCU.",
                            Title = "Fantastic Four",
                            TrailerLink = ""
                        },
                        new
                        {
                            MovieID = 14,
                            AgeLimit = "All Ages",
                            Duration = 100,
                            Genre = "Animation/Comedy",
                            IsUpcomingMovie = true,
                            MovieImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJgULr6iPFNLydknD-UKqWcCsfyUZVmJrjuw&s",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "Shrek and friends return for a new adventure.",
                            Title = "Shrek 5",
                            TrailerLink = ""
                        });
                });

            modelBuilder.Entity("Cinema.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ShowtimeSeatID")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShowtimeSeatID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Cinema.Models.OrderTable", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int?>("CouponID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("CouponID");

                    b.HasIndex("UserID");

                    b.ToTable("OrderTables");
                });

            modelBuilder.Entity("Cinema.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            Description = "A large bucket of buttered popcorn.",
                            Name = "Popcorn",
                            Price = 89000.0,
                            ProductImage = "/css/images/popcorn.png",
                            ProductType = 0,
                            Quantity = 50
                        },
                        new
                        {
                            ProductID = 2,
                            Description = "Refreshing cold soda, 500ml.",
                            Name = "Soda",
                            Price = 39000.0,
                            ProductImage = "/css/images/soda.png",
                            ProductType = 1,
                            Quantity = 100
                        },
                        new
                        {
                            ProductID = 3,
                            Description = "Refreshing cold soda, 500ml.",
                            Name = "Coca",
                            Price = 39000.0,
                            ProductImage = "/css/images/drink2.png",
                            ProductType = 1,
                            Quantity = 100
                        },
                        new
                        {
                            ProductID = 4,
                            Description = "Refreshing cold soda, 500ml.",
                            Name = "Sprite",
                            Price = 39000.0,
                            ProductImage = "/css/images/drink1.png",
                            ProductType = 1,
                            Quantity = 100
                        },
                        new
                        {
                            ProductID = 5,
                            Description = "Refreshing cold soda, 500ml.",
                            Name = "Combo Couple",
                            Price = 129000.0,
                            ProductImage = "/css/images/popcorn1.png",
                            ProductType = 2,
                            Quantity = 100
                        },
                        new
                        {
                            ProductID = 6,
                            Description = "Refreshing cold soda, 500ml.",
                            Name = "Combo Full",
                            Price = 229000.0,
                            ProductImage = "/css/images/popcorn2.png",
                            ProductType = 2,
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("Cinema.Models.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CinemaID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RoomID");

                    b.HasIndex("CinemaID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomID = 1,
                            Capacity = 100,
                            CinemaID = 1,
                            RoomNumber = "A1",
                            Status = 0
                        },
                        new
                        {
                            RoomID = 2,
                            Capacity = 150,
                            CinemaID = 2,
                            RoomNumber = "B1",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Cinema.Models.Seat", b =>
                {
                    b.Property<int>("SeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatID"));

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SeatID");

                    b.HasIndex("RoomID");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            SeatID = 1,
                            ColumnNumber = 1,
                            RoomID = 1,
                            Row = "A",
                            Status = 1
                        },
                        new
                        {
                            SeatID = 2,
                            ColumnNumber = 2,
                            RoomID = 1,
                            Row = "A",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 3,
                            ColumnNumber = 3,
                            RoomID = 1,
                            Row = "A",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 4,
                            ColumnNumber = 4,
                            RoomID = 1,
                            Row = "A",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 5,
                            ColumnNumber = 5,
                            RoomID = 1,
                            Row = "A",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 6,
                            ColumnNumber = 6,
                            RoomID = 1,
                            Row = "A",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 7,
                            ColumnNumber = 7,
                            RoomID = 1,
                            Row = "A",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 8,
                            ColumnNumber = 8,
                            RoomID = 1,
                            Row = "A",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 9,
                            ColumnNumber = 9,
                            RoomID = 1,
                            Row = "A",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 10,
                            ColumnNumber = 10,
                            RoomID = 1,
                            Row = "A",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 11,
                            ColumnNumber = 1,
                            RoomID = 1,
                            Row = "B",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 12,
                            ColumnNumber = 2,
                            RoomID = 1,
                            Row = "B",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 13,
                            ColumnNumber = 3,
                            RoomID = 1,
                            Row = "B",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 14,
                            ColumnNumber = 4,
                            RoomID = 1,
                            Row = "B",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 15,
                            ColumnNumber = 5,
                            RoomID = 1,
                            Row = "B",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 16,
                            ColumnNumber = 6,
                            RoomID = 1,
                            Row = "B",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 17,
                            ColumnNumber = 7,
                            RoomID = 1,
                            Row = "B",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 18,
                            ColumnNumber = 8,
                            RoomID = 1,
                            Row = "B",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 19,
                            ColumnNumber = 9,
                            RoomID = 1,
                            Row = "B",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 20,
                            ColumnNumber = 10,
                            RoomID = 1,
                            Row = "B",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 21,
                            ColumnNumber = 1,
                            RoomID = 1,
                            Row = "C",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 22,
                            ColumnNumber = 2,
                            RoomID = 1,
                            Row = "C",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 23,
                            ColumnNumber = 3,
                            RoomID = 1,
                            Row = "C",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 24,
                            ColumnNumber = 4,
                            RoomID = 1,
                            Row = "C",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 25,
                            ColumnNumber = 5,
                            RoomID = 1,
                            Row = "C",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 26,
                            ColumnNumber = 6,
                            RoomID = 1,
                            Row = "C",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 27,
                            ColumnNumber = 7,
                            RoomID = 1,
                            Row = "C",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 28,
                            ColumnNumber = 8,
                            RoomID = 1,
                            Row = "C",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 29,
                            ColumnNumber = 9,
                            RoomID = 1,
                            Row = "C",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 30,
                            ColumnNumber = 10,
                            RoomID = 1,
                            Row = "C",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 31,
                            ColumnNumber = 1,
                            RoomID = 1,
                            Row = "D",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 32,
                            ColumnNumber = 2,
                            RoomID = 1,
                            Row = "D",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 33,
                            ColumnNumber = 3,
                            RoomID = 1,
                            Row = "D",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 34,
                            ColumnNumber = 4,
                            RoomID = 1,
                            Row = "D",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 35,
                            ColumnNumber = 5,
                            RoomID = 1,
                            Row = "D",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 36,
                            ColumnNumber = 6,
                            RoomID = 1,
                            Row = "D",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 37,
                            ColumnNumber = 7,
                            RoomID = 1,
                            Row = "D",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 38,
                            ColumnNumber = 8,
                            RoomID = 1,
                            Row = "D",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 39,
                            ColumnNumber = 9,
                            RoomID = 1,
                            Row = "D",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 40,
                            ColumnNumber = 10,
                            RoomID = 1,
                            Row = "D",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 41,
                            ColumnNumber = 1,
                            RoomID = 1,
                            Row = "E",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 42,
                            ColumnNumber = 2,
                            RoomID = 1,
                            Row = "E",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 43,
                            ColumnNumber = 3,
                            RoomID = 1,
                            Row = "E",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 44,
                            ColumnNumber = 4,
                            RoomID = 1,
                            Row = "E",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 45,
                            ColumnNumber = 5,
                            RoomID = 1,
                            Row = "E",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 46,
                            ColumnNumber = 6,
                            RoomID = 1,
                            Row = "E",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 47,
                            ColumnNumber = 7,
                            RoomID = 1,
                            Row = "E",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 48,
                            ColumnNumber = 8,
                            RoomID = 1,
                            Row = "E",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 49,
                            ColumnNumber = 9,
                            RoomID = 1,
                            Row = "E",
                            Status = 0
                        },
                        new
                        {
                            SeatID = 50,
                            ColumnNumber = 10,
                            RoomID = 1,
                            Row = "E",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Cinema.Models.ShowTime", b =>
                {
                    b.Property<int>("ShowTimeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowTimeID"));

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ShowTimeID");

                    b.HasIndex("MovieID");

                    b.HasIndex("RoomID");

                    b.ToTable("showTimes");

                    b.HasData(
                        new
                        {
                            ShowTimeID = 1,
                            MovieID = 1,
                            RoomID = 1,
                            ShowDate = new DateTime(2025, 3, 10, 7, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ShowTimeID = 2,
                            MovieID = 2,
                            RoomID = 2,
                            ShowDate = new DateTime(2025, 3, 10, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ShowTimeID = 3,
                            MovieID = 1,
                            RoomID = 1,
                            ShowDate = new DateTime(2025, 3, 10, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ShowTimeID = 4,
                            MovieID = 1,
                            RoomID = 1,
                            ShowDate = new DateTime(2025, 3, 10, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ShowTimeID = 5,
                            MovieID = 1,
                            RoomID = 1,
                            ShowDate = new DateTime(2025, 3, 11, 7, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ShowTimeID = 6,
                            MovieID = 1,
                            RoomID = 2,
                            ShowDate = new DateTime(2025, 3, 11, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ShowTimeID = 7,
                            MovieID = 1,
                            RoomID = 2,
                            ShowDate = new DateTime(2025, 3, 11, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ShowTimeID = 8,
                            MovieID = 1,
                            RoomID = 1,
                            ShowDate = new DateTime(2025, 3, 12, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Cinema.Models.ShowtimeSeat", b =>
                {
                    b.Property<int>("ShowtimeSeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowtimeSeatID"));

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SeatID")
                        .HasColumnType("int");

                    b.Property<int>("ShowtimeID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ShowtimeSeatID");

                    b.HasIndex("SeatID");

                    b.HasIndex("ShowtimeID");

                    b.ToTable("showTimeSeats");

                    b.HasData(
                        new
                        {
                            ShowtimeSeatID = 1,
                            Price = 80000.0,
                            SeatID = 1,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 2,
                            Price = 80000.0,
                            SeatID = 2,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 3,
                            Price = 80000.0,
                            SeatID = 3,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 4,
                            Price = 80000.0,
                            SeatID = 4,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 5,
                            Price = 80000.0,
                            SeatID = 5,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 6,
                            Price = 80000.0,
                            SeatID = 6,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 7,
                            Price = 80000.0,
                            SeatID = 7,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 8,
                            Price = 80000.0,
                            SeatID = 8,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 9,
                            Price = 80000.0,
                            SeatID = 9,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 10,
                            Price = 80000.0,
                            SeatID = 10,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 11,
                            Price = 80000.0,
                            SeatID = 11,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 12,
                            Price = 80000.0,
                            SeatID = 12,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 13,
                            Price = 80000.0,
                            SeatID = 13,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 14,
                            Price = 80000.0,
                            SeatID = 14,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 15,
                            Price = 80000.0,
                            SeatID = 15,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 16,
                            Price = 80000.0,
                            SeatID = 16,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 17,
                            Price = 80000.0,
                            SeatID = 17,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 18,
                            Price = 80000.0,
                            SeatID = 18,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 19,
                            Price = 80000.0,
                            SeatID = 19,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 20,
                            Price = 80000.0,
                            SeatID = 20,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 21,
                            Price = 80000.0,
                            SeatID = 21,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 22,
                            Price = 80000.0,
                            SeatID = 22,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 23,
                            Price = 80000.0,
                            SeatID = 23,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 24,
                            Price = 80000.0,
                            SeatID = 24,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 25,
                            Price = 80000.0,
                            SeatID = 25,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 26,
                            Price = 80000.0,
                            SeatID = 26,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 27,
                            Price = 80000.0,
                            SeatID = 27,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 28,
                            Price = 80000.0,
                            SeatID = 28,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 29,
                            Price = 80000.0,
                            SeatID = 29,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 30,
                            Price = 80000.0,
                            SeatID = 30,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 31,
                            Price = 80000.0,
                            SeatID = 31,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 32,
                            Price = 80000.0,
                            SeatID = 32,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 33,
                            Price = 80000.0,
                            SeatID = 33,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 34,
                            Price = 80000.0,
                            SeatID = 34,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 35,
                            Price = 80000.0,
                            SeatID = 35,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 36,
                            Price = 80000.0,
                            SeatID = 36,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 37,
                            Price = 80000.0,
                            SeatID = 37,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 38,
                            Price = 80000.0,
                            SeatID = 38,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 39,
                            Price = 80000.0,
                            SeatID = 39,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 40,
                            Price = 80000.0,
                            SeatID = 40,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 41,
                            Price = 80000.0,
                            SeatID = 41,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 42,
                            Price = 80000.0,
                            SeatID = 42,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 43,
                            Price = 80000.0,
                            SeatID = 43,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 44,
                            Price = 80000.0,
                            SeatID = 44,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 45,
                            Price = 80000.0,
                            SeatID = 45,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 46,
                            Price = 80000.0,
                            SeatID = 46,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 47,
                            Price = 80000.0,
                            SeatID = 47,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 48,
                            Price = 80000.0,
                            SeatID = 48,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 49,
                            Price = 80000.0,
                            SeatID = 49,
                            ShowtimeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ShowtimeSeatID = 50,
                            Price = 80000.0,
                            SeatID = 50,
                            ShowtimeID = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Cinema.Models.Theater", b =>
                {
                    b.Property<int>("CinemaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CinemaID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CinemaCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CinemaID");

                    b.HasIndex("AdminID");

                    b.ToTable("Theaters");

                    b.HasData(
                        new
                        {
                            CinemaID = 1,
                            Address = "123 Main St, Da Nang City",
                            CinemaCity = "Danang",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grand Cinema",
                            NumberOfRooms = 5,
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Open",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CinemaID = 2,
                            Address = "456 Broadway Ave, HCM City",
                            CinemaCity = "Ho Chi Minh",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Skyline Theater",
                            NumberOfRooms = 7,
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Open",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CinemaID = 3,
                            Address = "124 Main St, Danang City",
                            CinemaCity = "Danang",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CGV Cinema",
                            NumberOfRooms = 5,
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Open",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CinemaID = 4,
                            Address = "124 Main St, HCM City",
                            CinemaCity = "Ho Chi Minh",
                            ClosingTime = new TimeSpan(0, 23, 0, 0, 0),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "HCM Cinestar Cinema",
                            NumberOfRooms = 5,
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Open",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Cinema.Models.UserCoupon", b =>
                {
                    b.Property<int>("UserCouponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCouponID"));

                    b.Property<int>("CouponID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserCouponID");

                    b.HasIndex("CouponID");

                    b.HasIndex("UserID");

                    b.ToTable("UserCoupon");
                });

            modelBuilder.Entity("Cinema.Models.ViewModels.FoodSelectionVM", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.ToTable("FoodSelectionVM");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cinema.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "a1234567-b89c-40d4-a123-456789abcdef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1234567-b89c-40d4-a123-456789abcdef",
                            Email = "daoduyquylop97@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "daoduyquylop97@gmail.com",
                            NormalizedUserName = "Đào Duy Quý",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ9",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a1234567-b89c-40d4-a123-456789abcdef",
                            TwoFactorEnabled = false,
                            UserName = "Đào Duy Quý",
                            FullName = "Đào Duy Quý",
                            Points = 0,
                            UserImage = "/css/images/user.png"
                        });
                });

            modelBuilder.Entity("Cinema.Models.OrderDetail", b =>
                {
                    b.HasOne("Cinema.Models.OrderTable", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");

                    b.HasOne("Cinema.Models.ShowtimeSeat", "ShowtimeSeat")
                        .WithMany()
                        .HasForeignKey("ShowtimeSeatID");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ShowtimeSeat");
                });

            modelBuilder.Entity("Cinema.Models.OrderTable", b =>
                {
                    b.HasOne("Cinema.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponID");

                    b.HasOne("Cinema.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cinema.Models.Room", b =>
                {
                    b.HasOne("Cinema.Models.Theater", "Cinema")
                        .WithMany("Rooms")
                        .HasForeignKey("CinemaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("Cinema.Models.Seat", b =>
                {
                    b.HasOne("Cinema.Models.Room", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Cinema.Models.ShowTime", b =>
                {
                    b.HasOne("Cinema.Models.Movie", "Movie")
                        .WithMany("ShowTimes")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cinema.Models.Room", "Room")
                        .WithMany("ShowTimes")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Cinema.Models.ShowtimeSeat", b =>
                {
                    b.HasOne("Cinema.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Models.ShowTime", "Showtime")
                        .WithMany()
                        .HasForeignKey("ShowtimeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("Showtime");
                });

            modelBuilder.Entity("Cinema.Models.Theater", b =>
                {
                    b.HasOne("Cinema.Models.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Cinema.Models.UserCoupon", b =>
                {
                    b.HasOne("Cinema.Models.Coupon", "Coupon")
                        .WithMany("UserCoupons")
                        .HasForeignKey("CouponID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.Models.Coupon", b =>
                {
                    b.Navigation("UserCoupons");
                });

            modelBuilder.Entity("Cinema.Models.Movie", b =>
                {
                    b.Navigation("ShowTimes");
                });

            modelBuilder.Entity("Cinema.Models.OrderTable", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Cinema.Models.Room", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("ShowTimes");
                });

            modelBuilder.Entity("Cinema.Models.Theater", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
